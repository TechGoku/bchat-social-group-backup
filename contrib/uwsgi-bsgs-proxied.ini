# uwsgi configuration for using with a front end reverse proxy that proxies full HTTP requests to a
# localhost TCP port; this (or the unix socket alternative) is the recommended base configuration
# for all but the simplest setups, but requires some extra initial setup.
#
# Note that, while this configuration listens for HTTP connections, it is meant to sit behind a
# public reverse proxy server and is *not* suitable for use as a public-facing HTTP server; see
# uwsgi-bsgs-standalone.ini for a configuration suitable for service direct public requests.
#
# Configuration requires:
# - change the chdir= to the path where you want to write the bsgs data files (database, uploads,
#   keys, etc.)
#
# - change uid= and gid= values to the system user/group names that the script should run as.  DO
#   NOT RUN AS root!  That path that you specify for `chdir=` should be owned by this user/group.
#
# - tweak the `processes` argument, if desired and you have more than 2 cores and expect a very busy
#   BSGS.
#
# - if using uwsgi in vassal mode then put the configuration file into /etc/uwsgi/vassals
#
# - set up the front-end reverse proxy.  For nginx this means setting up a basic site configuration
#   like this:
#
#   server {
#       server_name mysite.com;
#
#       client_max_body_size 10M;
#
#       location / {
#           proxy_set_header X-Real-IP $remote_addr;
#           proxy_pass http://127.3.2.1:4242$request_uri;
#       }
#
#       listen 80;
#       listen [::]:80;
#   }
#
#   For Apache enable the `proxy_http` module (`sudo a2enmod proxy_http` on Debian/Ubuntu systems)
#   and add this directive inside the <VirtualHost> section for the site:
#
#      ProxyPass / http://127.3.2.1:4242/
#

[uwsgi]
chdir = /home/USER/social-group-server
uid = USER
gid = GROUP
plugins = python3
http-socket = 127.3.2.1:4242
processes = 2
enable-threads = true
manage-script-name = true
mount = /=bsgs.web:app
mule = bsgs.mule:run
